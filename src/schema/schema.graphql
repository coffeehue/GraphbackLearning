## NOTE: This schema was generated by Graphback and should not be changed manually

""" @model """
type Author {
  """ @id """
  id: ID!
  authorName: String!
  country: String

  """
  @oneToMany(field: 'author', key: 'authorId')
  @oneToMany(field: 'author')
  """
  Book(filter: BookFilter): [Book!]

  """@manyToOne(field: 'Author', key: 'bookId')"""
  book: Book
}

input AuthorFilter {
  id: IDInput
  authorName: StringInput
  country: StringInput
  bookId: IDInput
  and: [AuthorFilter!]
  or: [AuthorFilter!]
  not: AuthorFilter
}

type AuthorResultList {
  items: [Author]!
  offset: Int
  limit: Int
  count: Int
}

input AuthorSubscriptionFilter {
  and: [AuthorSubscriptionFilter!]
  or: [AuthorSubscriptionFilter!]
  not: AuthorSubscriptionFilter
  id: IDInput
  authorName: StringInput
  country: StringInput
}

""" @model """
type Book {
  """ @id """
  id: ID!
  bookName: String
  genre: String
  price: String

  """
  @oneToMany(field: 'book', key: 'bookId')
  @oneToMany(field: 'book')
  """
  Author(filter: AuthorFilter): [Author!]

  """@manyToOne(field: 'Book', key: 'authorId')"""
  author: Author
}

input BookFilter {
  id: IDInput
  bookName: StringInput
  genre: StringInput
  price: StringInput
  authorId: IDInput
  and: [BookFilter!]
  or: [BookFilter!]
  not: BookFilter
}

type BookResultList {
  items: [Book]!
  offset: Int
  limit: Int
  count: Int
}

input BookSubscriptionFilter {
  and: [BookSubscriptionFilter!]
  or: [BookSubscriptionFilter!]
  not: BookSubscriptionFilter
  id: IDInput
  bookName: StringInput
  genre: StringInput
  price: StringInput
}

input CreateAuthorInput {
  authorName: String!
  country: String
  bookId: ID
}

input CreateBookInput {
  bookName: String
  genre: String
  price: String
  authorId: ID

}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutateAuthorInput {
  id: ID!
  authorName: String
  country: String
  bookId: ID
}

input MutateBookInput {
  id: ID!
  bookName: String
  genre: String
  price: String
  authorId: ID
}

type Mutation {
  createAuthor(input: CreateAuthorInput!): Author
  updateAuthor(input: MutateAuthorInput!): Author
  deleteAuthor(input: MutateAuthorInput!): Author
  createBook(input: CreateBookInput!): Book
  updateBook(input: MutateBookInput!): Book
  deleteBook(input: MutateBookInput!): Book
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getAuthor(id: ID!): Author
  findAuthors(filter: AuthorFilter, page: PageRequest, orderBy: OrderByInput): AuthorResultList!
  getBook(id: ID!): Book
  findBooks(filter: BookFilter, page: PageRequest, orderBy: OrderByInput): BookResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newAuthor(filter: AuthorSubscriptionFilter): Author!
  updatedAuthor(filter: AuthorSubscriptionFilter): Author!
  deletedAuthor(filter: AuthorSubscriptionFilter): Author!
  newBook(filter: BookSubscriptionFilter): Book!
  updatedBook(filter: BookSubscriptionFilter): Book!
  deletedBook(filter: BookSubscriptionFilter): Book!
}